# -*- coding: utf-8 -*- {{{
# vim: set fenc=utf-8 ft=python sw=4 ts=4 sts=4 et:
#
#       Copyright (2021) Battelle Memorial Institute
#                      All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# }}}

import binascii
import subprocess
import os
import socket
import struct
import sys
import ctypes
import crcmod
import time
import itertools
#from pymodbus.client.sync import ModbusTcpClient as ModbusClient
import logging
import json
from ftplib import FTP
import telnetlib
import json

CRC_Fun = crcmod.predefined.mkPredefinedCrcFun("crc-16-dnp")

def check_crc(buff, count):
    count -= 2
    tmp_buff = buff[:-2]
    crc = CRC_Fun(bytes(tmp_buff))
    count += 2
    if hex(buff[count-2]) != hex(crc & 0xff) or hex(buff[count-1]) != hex(crc >> 8):
        return 1
    else:
        return 0

def isNthBitSet(integer, n):
    if integer & (1 << (n - 1)):
        return True
    else:
        return False

def mygrouper(n, iterable):
    args = [iter(iterable)] * n
    return ([e for e in t if e != None] for t in itertools.izip_longest(*args))

def SEL_Relay_get_DeviceInfo(**kwargs):
    """
    This function pulls the relevant device information and returns a dictionary.
    """
    IP=kwargs['TARGET_IPADDR']
    tn=telnetlib.Telnet(IP)
    tn.write(b'ID\r\n')
    tn.write(b'HEL\r\n')
    tn.write(b'EXI\r\n')
    # Read all the output from the telnet session
    output=tn.read_all().decode('ascii')

    # Parse the output results
    output=output[output.find("\"")+1:output.rfind("\"")]

    outSplit=output.split("\",\"")
    i=0
    # Trim out a part of the response that is not needed
    for substr in outSplit:
        outSplit[i]=substr[substr.find("\n")+2:]
        i+=1
    # Remove the last element in the list as it is not needed
    outSplit.pop()
    # Now we need to convert this list into a dictionary
    results={}
    for item in outSplit:
        left=item.find('=')
        attribute=item[0:left]
        results[attribute]=item[left+1:]

    return_results = {}

    return_results['SCAN_NAME'] = 'SEL_Relay_get_DeviceInfo'
    return_results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    return_results['MODEL'] = results['type']
    return_results['IEC_61850_DEVICE_CONFIG_VERSION'] = results['configVersion']
    return_results['DEVICE_CODE'] = results['DEVCODE']
    return_results['IEC_61850_CID_VERSION'] = results['CID']
    return_results['PART_NO'] = results['PARTNO']
    return_results['SERIAL_NO'] = results['SERIALNO']
    return_results['DEVICE_NAME'] = results['DEVID']
    return_results['IEC_61850_DEVICE_NAME'] = results['iedName']
    return_results['BOOT_FIRMWARE_ID'] = results['BFID']
    return_results['DEVICE_CONFIG_ID'] = results['CONFIG']
    return_results['FIRMWARE_ID'] = results['ID']
    return_results['DEVICE_SPECIAL'] = results['SPECIAL']

    return return_results

def SAGE_Relay_get_DeviceInfo(**kwargs):
    """
    This function pulls the relevant device information and returns a dictionary.
    """
    deviceIP=kwargs['TARGET_IPADDR']
    default_creds=['Admin','Admin']
    try:
        ftp=FTP(deviceIP)
        ret_code=ftp.login(user=default_creds[0],passwd=default_creds[1])
        #print(ret_code)
    except Exception as err:
        print('Login exception: ',err)

    # If we are able to login into the device with the default credentials,
    # Then, let us try to download key files from its file system
    try:
        fileNames=['access.xml','bootline.xml']
        for f in fileNames:
            fd=open(f,'wb')
            ret_code=ftp.retrbinary('RETR '+ f,fd.write)
            fd.close()
            #print(ret_code)
    except Exception as err:
        print(ret_code,': ',err)
    # Now, we pull the file that has info on the MODEL, OS, etc.,
    # We will try to cd into Webfiles/xml
    try:
        ret_code=ftp.cwd('/d:/Webfiles/xml/')
        #print(ret_code)
        fileNames=['rtusetup.xml']
        for f in fileNames:
            fd=open(f,'wb')
            ret_code=ftp.retrbinary('RETR '+ f,fd.write)
            fd.close()
            #print(ret_code)
    except Exception as err:
        print('Exception when trying to read RTU configuration!')
    ftp.quit()

    # If the files are available, then let us read it back first,
    # and store it in a format that is useful
    try:
        # Bootline gives us some information about which file is used to boot
        # and the IP address, netmask, gateway

        f='bootline.xml'
        results={}
        fd=open(f,'r')
        for line in fd:
            words=line.split(' ')
            for word in words:
                if len(word)==0:
                    continue
                if word[0]=='e':
                    results['IPADDR:NETMASK']=word[3:len(word)-1]
                elif word[0]=='g':
                    results['GATEWAY']=word[3:len(word)-4]
        fd.close()
        # RTU Setup has all the important information
        f='rtusetup.xml'
        fd=open(f,'r')
        copy=0
        # We need to parse the XML file to get the information
        # Here we find the RTU section and get the fields underneath that
        for line in fd:
            if line.find('<RTU>')==0:
                copy=1
            elif line.find('</RTU>')==0:
                copy=0
            if copy:
                if line[1]=='/':
                    continue
                left=line.find('>')
                right=line.rfind('<')
                attribute=line[1:left]
                if (right-left)>0:
                    value=line[left+1:right]
                else:
                    continue
                results[attribute]=value
        fd.close()
        os.remove('access.xml')
        os.remove('bootline.xml')
        os.remove('rtusetup.xml')

        return_results = {}

        return_results['SCAN_NAME'] = 'SAGE_Relay_get_DeviceInfo'
        return_results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
        return_results['DEVICE_MISC'] = results['APPFILE']
        return_results['DEVICE_NAME'] = results['NAME']
        return_results['FIRMWARE_DATE'] = results['VXCREATED']
        return_results['PART_NO'] = results['PARTNO']
        return_results['DEVICE RUN MODE'] = results['RUNMODE']
        return_results['FIRMWARE_ID'] = results['VXVERSION']
        return_results['MODEL'] = results['TYPE']
        return_results['TARGET_GATEWAY_IPADDR'] = results['GATEWAY']
        return_results['TARGET_NETMASK'] = results['IPADDR:NETMASK'].split(':')[1]
        return return_results

    except Exception as err:
        print('Something went wrong with the file parsing!')

class configMgmtGE(object):

    def __init__(self,ipAddress,port=502):
        """
        Modbus initialization.
        """
        self.ipAddress=ipAddress
        self.port=port
        self.slaveAddress=0x0
        self.IPAddress='0.0.0.0'
        self.gatewayIPAddress='0.0.0.0'
        self.subnetMask='255.255.0.0'
    
    def detectSlaveID(self):
        """
        Detect the slave ID for sweeping through Modbus addresses 1-254.
        """
        client = ModbusClient(self.ipAddress,self.port)
        client.connect()
        
        for UNIT in range(0,255):
            try:
                rr = client.read_input_registers(0, 1, unit=UNIT)
                if (rr.isError()):
                    pass
                else:
                    self.slaveAddress=UNIT
                    break
            except Exception as e:
                print(str(e))
                pass
        client.close()
        return self
    
    def getDeviceInfo(self):
        """
        Get all the important device parameters that are relevant for SSASS-E.
        """
        client = ModbusClient(self.ipAddress,self.port)
        client.connect()

        # Product Type - 0x00, one 16 bit unsigned integer
        rr = client.read_input_registers(0x00, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.productType=rr.registers[0]

        # Product Version - 0x02, one 16 bit unsigned integer
        rr = client.read_input_registers(0x02, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.productVersion=rr.registers[0]/100
        
        # Serial Number - 0x10, 16 character ASCII Text
        rr = client.read_input_registers(0x10, 6, unit=self.slaveAddress)
        if (not rr.isError()):
            self.serialNumber=self.convertF203(rr.registers)
        
        # Part Number - 0x40, 80 character ASCII Text
        rr = client.read_input_registers(0x40, 18, unit=self.slaveAddress)
        if (not rr.isError()):
            self.partNumber=self.convertF204(rr.registers)
        
        # Ethernet MAC Address - 0x90, Hex 6 Bytes ASCII Text
        rr = client.read_input_registers(0x90, 3, unit=self.slaveAddress)
        if (not rr.isError()):
            self.MACAddress=self.convertF072MAC(rr.registers)
        
        # CPU Module Serial Number - 0xA0, 16 character ASCII Text
        rr = client.read_input_registers(0xA0, 6, unit=self.slaveAddress)
        if (not rr.isError()):
            self.CPUSerialNumber=self.convertF203(rr.registers)
        
        # CPU Supplier Serial Number - 0xB0, 16 character ASCII Text
        rr = client.read_input_registers(0xB0, 7, unit=self.slaveAddress)
        if (not rr.isError()):
            self.CPUSupplierSerialNumber=self.convertF203(rr.registers)
        
        # Ethernet Sub Module Serial Number - 0xC0, 16 character ASCII Text
        rr = client.read_input_registers(0xC0, 7, unit=self.slaveAddress)
        if (not rr.isError()):
            self.EthernetSerialNumber=self.convertF203(rr.registers)
        
        client.close()
        return self

    def getIPConfig(self):
        """
        Read the IP address, subnet mask, gateway of a GE UR relay over Modbus.
        """
        client = ModbusClient(self.ipAddress,self.port)
        client.connect()
        
        # Read the IP address first
        rr = client.read_input_registers(0x4087, 2, unit=self.slaveAddress)
        if (not rr.isError()):
            self.IPAddress=self.convertF072IP(rr.registers)

        # Read the Subnet mask then
        rr = client.read_input_registers(0x4089, 2, unit=self.slaveAddress)
        if (not rr.isError()):
            self.subnetMask=self.convertF072IP(rr.registers)
        
        # Read the Gateway IP address last
        rr = client.read_input_registers(0x408B, 2, unit=self.slaveAddress)
        if (not rr.isError()):
            self.gatewayIPAddress=self.convertF072IP(rr.registers)
        
        client.close()
        return self

    def getSCADAConfig(self):
        """
        Read the addresses for Modbus, DNP3 protocols of a GE UR relay over Modbus.
        """
        client = ModbusClient(self.ipAddress,self.port)
        client.connect()
        
        # Read the Modbus slave address 
        rr = client.read_input_registers(0x4080, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.ModbusSlaveAddress=rr.registers[0]

        # Read the Modbus port number
        rr = client.read_input_registers(0x40A3, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.ModbusPortNumber=rr.registers[0]

        # Read the DNP3 slave address
        rr = client.read_input_registers(0x409C, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.DNP3SlaveAddress=rr.registers[0]
        
        # Read the DNP3 port number
        rr = client.read_input_registers(0x40A4, 1, unit=self.slaveAddress)
        if (not rr.isError()):
            self.DNP3PortNumber=rr.registers[0]
        
        client.close()
        return self
    
    def changeIPAddress(self):
        """
        Set the IP address of a GE UR relay over Modbus.
        """
        return self

    def convertF203(self,words):
        """
        Convert GE configuration format F203 to a readble output.
        """
        Out=''
        for word in words:
            for byte in to_bytes(word):
                Out+=chr(byte)
        return Out
        
    def convertF204(self,words):
        """
        Convert GE configuration format F204 to a readble output.
        """
        Out=''
        counter=0
        for word in words:
            for byte in to_bytes(word):
                Out+=chr(byte)
        return Out[:len(Out)-1]
            
    def convertF072IP(self,words):
        """
        Convert GE configuration format F072 to a readble output.
        """
        IP=''
        for word in words:
            for byte in to_bytes(word):
                IP+=str(byte)+'.'
        return IP[:len(IP)-1]

    def convertF072MAC(self,words):
        """
        Convert GE configuration format F072 to a readble output.
        """
        MAC=''
        for word in words:
            for byte in to_bytes(word):
                if byte<15:
                    MAC+='0'
                MAC+=hex(byte)[2:]+'-'
        return MAC[:len(MAC)-1]

    def to_bytes(data):
        if type(data)!=int:
            raise Exception('Data type incompatibility!')
        data_low=0x00FF&data
        data_high=(0xFF00&data)>>8
        return unichr(data_high)+unichr(data_low)

def dnp3_request_link_status(master, slave, ip, port):

    DNP_COMS = False
    dnp3_data_link_header = [0x05, 0x64, 0x05, 0xc9]
    ip_address = ip
    dnp3_slave = slave
    dnp3_master = master

    dnp3_data_link_header.append(dnp3_slave & 0xff)
    dnp3_data_link_header.append(dnp3_slave >> 8)
    dnp3_data_link_header.append(dnp3_master & 0xff)
    dnp3_data_link_header.append(dnp3_master >> 8)

    req_info = bytearray(struct.pack('B B B B B B B B', *dnp3_data_link_header))
    dnp3_data_link_checksum = CRC_Fun(bytes(req_info))
    req_info.append(dnp3_data_link_checksum & 0xff)
    req_info.append(dnp3_data_link_checksum >> 8)

    dnp_port = port

#Open connection
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = (ip_address, dnp_port)
    sock.settimeout(10)
#Send packet and receive response

    #print "GOT HERE"

    try:
        #print('sending {!r}'.format(binascii.hexlify(req_info)))
        sock.connect(server_address)
        #print "GOT HERE1"
        sock.sendall(req_info)
        res = sock.recv(1024)

        is_Status = 0
        crc_check = 0
        tmp_dnp_data = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        tmp_dnp_data_counter = 0

        if (res):
            length_offset = 2
            DL_control_offset = 3

            for i in range(len(res)-9):
                if ord(res[i]) == 0x05 and ord(res[i+1]) == 0x64:
                    if ord(res[i+DL_control_offset]) == 0x0b:
                        is_Status = 1
                        for j in range(i+int(ord(res[i+length_offset])) + 5):
                            tmp_dnp_data[tmp_dnp_data_counter] = ord(res[j])
                            tmp_dnp_data_counter += 1
                        tmp_dnp_data = bytearray(tmp_dnp_data) 
                    else:
                        is_Status = 0
	
            if is_Status == 1:
                crc_check = check_crc(tmp_dnp_data, tmp_dnp_data_counter)
                if crc_check == 0:
                    DNP_COMS = True

    except socket.error as error:
        print("ERROR: Not able to establish connection on port {} with {}: Socket Error: {}".format(port, ip, error))

    finally:
   #     print('closing socket')
        sock.shutdown(1)
        sock.close()
        return DNP_COMS

def GE_get_IPConfig(**kwargs):
    
    #obj=configMgmtGE(kwargs['TARGET_IPADDR'])
    #obj.port=int(kwargs['MODBUS_PORT'])
    #obj.getIPConfig()

    config_path = os.path.join(os.getcwd(), "ssasse_platform", "ActiveScanningEngine", "custom_scans")

    python3_command = "./" + config_path + "SSASSE_config_mgmt_GE_get_IPConfig.py " + str(kwargs['TARGET_IPADDR'])
    process = subprocess.Popen(python3_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    #print output
    #json.loads(output)

        
    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'TARGET_NETMASK', 'TARGET_GATEWAY_IPADDR'])



    results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    results['SCAN_NAME'] = 'GE_get_IPConfig'
    results['TARGET_NETMASK'] = json.loads(output)['subnetMask']
    results['TARGET_GATEWAY_IPADDR'] = json.loads(output)['gatewayIPAddress']

    return results
    
def GE_get_SCADAConfig(**kwargs):

    #obj=configMgmtGE(kwargs['TARGET_IPADDR'])
    #obj.port=int(kwargs['MODBUS_PORT'])
    #obj.getSCADAConfig()


    config_path = os.path.join(os.getcwd(), "ssasse_platform", "ActiveScanningEngine", "custom_scans")
    python3_command = "./" + config_path + "SSASSE_config_mgmt_GE_get_SCADAConfig.py " + str(kwargs['TARGET_IPADDR'])
    process = subprocess.Popen(python3_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'MODBUS_SLAVE_ID', 'MODBUS_PORT', 'DNP3_SLAVE_ID', 'DNP3_PORT'])

    results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    results['SCAN_NAME'] = 'GE_get_SCADAConfig'
    results['MODBUS_SLAVE_ID'] = json.loads(output)['ModbusSlaveAddress']
    results['MODBUS_PORT'] = json.loads(output)['ModbusPortNumber']
    results['DNP3_SLAVE_ID'] = json.loads(output)['DNP3SlaveAddress']
    results['DNP3_PORT'] = json.loads(output)['DNP3PortNumber']

    return results

def CWETH_get_DeviceInfo(**kwargs):


    config_path = os.path.join(os.getcwd(), "ssasse_platform", "ActiveScanningEngine", "custom_scans")
    python3_command = config_path + "/SSASSE_config_mgmt_CWETH_get_DeviceInfo.py " + str(kwargs['TARGET_IPADDR'])
    process = subprocess.Popen(python3_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'SERIAL_NO', 'MODEL', 'DEVICE_NAME', 'DATE_CODE', 'BOOT_FIRMWARE_ID', 'PART_NO', 'FIRMWARE_ID', 'VENDOR', 'FIRMWARE_DATE'])

    results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    results['SCAN_NAME'] = 'CWETH_get_DeviceInfo'
    results['SERIAL_NO']= json.loads(output)['SerialNumber']
    results['MODEL'] = json.loads(output)['BaseType']
    results['DEVICE_NAME'] = json.loads(output)['DeviceName']
    results['DATE_CODE'] = json.loads(output)['DateCode']
    results['BOOT_FIRMWARE_ID'] = json.loads(output)['FirmwareSerialNumber']
    results['PART_NO'] = json.loads(output)['ModuleType']
    results['FIRMWARE_ID'] = json.loads(output)['Firmware Version']
    results['VENDOR'] = json.loads(output)['VendorName']
    results['FIRMWARE_DATE'] = json.loads(output)['FirmwareDate']

    return results



def GE_Relay_get_DeviceInfo(**kwargs):

    #obj=configMgmtGE(kwargs['TARGET_IPADDR'])
    #obj.port=int(kwargs['MODBUS_PORT'])
    #obj.getDeviceInfo()

    config_path = os.path.join(os.getcwd(), "ssasse_platform", "ActiveScanningEngine", "custom_scans")
    python3_command = config_path + "/"+ "SSASSE_config_mgmt_GE_Relay_get_DeviceInfo.py " + str(kwargs['TARGET_IPADDR'])
    process = subprocess.Popen(python3_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'DEVICE_CODE', 'FIRMWARE_ID', 'SERIAL_NO', 'PART_NO', 'TARGET_MACADDR', 'TARGET_CPU_SERIAL_NO', 'TARGET_CPU_SUPPLIER_SERIAL_NO', 'TARGET_ETHERNET_SERIAL_NO'])

    results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    results['SCAN_NAME'] = 'GE_Relay_get_DeviceInfo'
    results['DEVICE_CODE'] = json.loads(output)['productType']
    results['FIRMWARE_ID'] = json.loads(output)['productVersion']
    results['SERIAL_NO'] = json.loads(output)['serialNumber']
    results['PART_NO'] = json.loads(output)['partNumber']
    results['MODEL'] = json.loads(output)['partNumber'][0:3]
    results['TARGET_MACADDR'] = json.loads(output)['MACAddress']
    results['TARGET_CPU_SERIAL_NO'] = json.loads(output)['CPUSerialNumber']
    results['TARGET_CPU_SUPPLIER_SERIAL_NO'] = json.loads(output)['CPUSupplierSerialNumber']
    results['TARGET_ETHERNET_SERIAL_NO'] = json.loads(output)['EthernetSerialNumber']

    return results

def dnp3_read_device_attributes(**kwargs):
    print("dnp3_read_device_attributes: {}".format(kwargs))
    #print "Got to dnp3_read_device_attributes"
    dnp3_data_link_header = [0x05, 0x64, 0x0e, 0xc4]

    dnp3_master = int(kwargs['DNP3_MASTER_ID'])
    dnp3_slave = int(kwargs['DNP3_SLAVE_ID'])
    ip_address = kwargs['TARGET_IPADDR']

    dnp3_data_link_header.append(dnp3_slave & 0xff)
    dnp3_data_link_header.append(dnp3_slave >> 8)
    dnp3_data_link_header.append(dnp3_master & 0xff)
    dnp3_data_link_header.append(dnp3_master >> 8)

    dnp3_data = [0xc1, 0xc1, 0x01, 0x00, 0xfa, 0x06, 0x00, 0xfc, 0x06]

    dnp3_port = int(kwargs['DNP3_PORT'])

    #---------------MAIN--------------------

    #Calculate Checksums

    packed_dnp3_data_link_header = bytearray(struct.pack('B B B B B B B B', *dnp3_data_link_header))
    dnp3_data_link_checksum = CRC_Fun(bytes(packed_dnp3_data_link_header))
    packed_dnp3_data_link_header.append(dnp3_data_link_checksum & 0xff)
    packed_dnp3_data_link_header.append(dnp3_data_link_checksum >> 8)

    packed_dnp3_application_data = bytearray(struct.pack('B B B B B B B B B', *dnp3_data))
    dnp3_data_checksum = CRC_Fun(bytes(packed_dnp3_application_data))
    packed_dnp3_application_data.append(dnp3_data_checksum & 0xff)
    packed_dnp3_application_data.append(dnp3_data_checksum >> 8)
    

    #Build Packet Data
    req_info =  packed_dnp3_data_link_header + packed_dnp3_application_data

    #print "Before Request Link Status"

    retry_count = 2

    while retry_count > 0:
        
        time.sleep(10)
        DNP3_COMS = dnp3_request_link_status(dnp3_master, dnp3_slave, ip_address, dnp3_port)
        if DNP3_COMS:
            break
        retry_count -= 1

    #print "After Request Link Status"
    #Sleep to provide time for connection to close properly
    if DNP3_COMS:
    	time.sleep(10)

    #Open connection
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = (ip_address, dnp3_port)
    sock.settimeout(10)

    #Send packet and receive response
    
    #print "before results"
    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'DNP3_COMMS', 'DNP3_DATA_AVAILABLE', 'MODEL', 'VENDOR'])

    results['TARGET_IPADDR'] = ip_address
    results['SCAN_NAME'] = 'dnp3_read_device_attributes'

    #Check if DNP3 Communication is even possible

    if not DNP3_COMS:
        results['DNP3_COMMS'] = 0
        return results
    else:
        results['DNP3_COMMS'] = 1

        try:
            #print('sending {!r}'.format(binascii.hexlify(req_info)))
            sock.connect(server_address)
            sock.sendall(req_info)
            res = sock.recv(1024)

            #Parse Packet
            crc_check = 0
            tmp_dnp_data = ""
            dnp3_response_no_crc = []
            tmp_dnp_data_counter = 0
            MODEL = ""
            man = ""

            if (res):
                length_offset = 2
                App_Internal_Indications_offset_1 = 13
                App_Internal_Indications_offset_2 = 14
                App_Object_Data_length_offset = 11

                for i in range(len(res)-9):
                    if ord(res[i]) == 0x05 and ord(res[i+1]) == 0x64:
                        if len(res) > 10: #Packet is not just a Request Link Status
                            tmp_dnp_data = res[10:]
                            tmp_dnp_data = list(mygrouper(18, bytearray(tmp_dnp_data)))
                            for l in tmp_dnp_data:
                                dnp3_response_no_crc = dnp3_response_no_crc + l[:-2]
                                
                            internal_indications_1 = ord(res[i+App_Internal_Indications_offset_1])
                            internal_indications_2 = ord(res[i+App_Internal_Indications_offset_2])
                            #TODO Add condition for each indication flag
                            if isNthBitSet(internal_indications_2, 2) or isNthBitSet(internal_indications_2, 3):
                                results['DNP3_DATA_AVAILABLE'] = 0
                                return results
                            #Checking for indication of class 1, 2, or 3 data available (This may not be a good indication that device attributes are in the response)
                            elif isNthBitSet(internal_indications_1, 2) or isNthBitSet(internal_indications_1, 3) or isNthBitSet(internal_indications_1, 4): 
                                results['DNP3_DATA_AVAILABLE'] = 1
                            
                                #look at byte 21 (byte 11 in dnp3_respone_no_crc) for length of object data, read next length bytes as object data, skip 7 more bytes after
                                
                            for j in range(App_Object_Data_length_offset+1, App_Object_Data_length_offset+dnp3_response_no_crc[App_Object_Data_length_offset]+1):
                                MODEL += str(unichr(dnp3_response_no_crc[j]))
                            #print MODEL
                            App_Object_Data_length_offset = App_Object_Data_length_offset + dnp3_response_no_crc[App_Object_Data_length_offset] + 7
                            for j in range(App_Object_Data_length_offset+1, App_Object_Data_length_offset+dnp3_response_no_crc[App_Object_Data_length_offset]+1):
                                man += str(unichr(dnp3_response_no_crc[j]))
                            #print man 
                
                results['MODEL'] = MODEL
                results['VENDOR'] = man

        except socket.error as error:
            print(error)

        finally:
            sock.close()
            return results

def dnp3_read_analog_inputs(**kwargs):

    config_path = os.path.join(os.getcwd(), "ssasse_platform", "ActiveScanningEngine", "custom_scans")

    python3_command = "./" + config_path + "dnp3_read_analog_inputs.py " + str(kwargs['TARGET_IPADDR']) + " " + str(kwargs['DNP3_SLAVE_ID']) + " " + str(kwargs['DNP3_PORT'])
    process = subprocess.Popen(python3_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    #print output

    results = dict.fromkeys(['TARGET_IPADDR', 'SCAN_NAME', 'DNP3_DEFAULT_ANINP_VAR'])

    results['TARGET_IPADDR'] = kwargs['TARGET_IPADDR']
    results['SCAN_NAME'] = 'dnp3_read_analog_inputs'
    results['DNP3_DEFAULT_ANINP_VAR'] = json.loads(output.rstrip())['VARIATION']

    return results

